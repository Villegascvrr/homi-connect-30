
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://salayaazmrghyqjddagm.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNhbGF5YWF6bXJnaHlxamRkYWdtIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM3MTIwNTUsImV4cCI6MjA1OTI4ODA1NX0.9gj_r8FTvbq_DuE4Bw7O-gP2GV8dbemQeUwd4Mwh9to";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    storage: typeof window !== 'undefined' ? localStorage : undefined,
    storageKey: 'homi-auth-session',
    detectSessionInUrl: true
  }
});

// Function to check if a session exists in localStorage
export const hasStoredSession = (): boolean => {
  if (typeof window === 'undefined') return false;
  
  const sessionStr = localStorage.getItem('homi-auth-session');
  if (!sessionStr) return false;
  
  try {
    const sessionData = JSON.parse(sessionStr);
    // Check if session is expired
    if (sessionData.expires_at) {
      const expiresAt = new Date(sessionData.expires_at * 1000);
      return expiresAt > new Date();
    }
    return !!sessionData.access_token;
  } catch (e) {
    console.error("Error parsing session from localStorage:", e);
    return false;
  }
};

/**
 * Checks if a username is available (not already used by another user)
 * @param username The username to check
 * @returns Promise resolving to boolean indicating if username is available
 */
export const isUsernameAvailable = async (username: string): Promise<boolean> => {
  const { data, error } = await supabase
    .from('profiles')
    .select('username')
    .eq('username', username)
    .single();
  
  if (error && error.code === 'PGRST116') {
    // Error code for no rows returned - username is available
    return true;
  }
  
  // If we got data back, username exists
  return !data;
};

/**
 * Signs in with Google OAuth
 * This function handles the Google authentication flow and ensures redirects work properly
 * Works for both new and existing users
 */
export const signInWithGoogleOAuth = async (): Promise<void> => {
  // Always use the window.location.origin to ensure the redirect is correct
  const origin = window.location.origin;
  // Always append these paths to handle callbacks correctly
  const redirectPaths = ['/verified', '/auth/callback', '/callback'];
  
  // Use primary redirect to /verified, but ensure all paths are configured in Supabase
  const redirectTo = `${origin}/verified`;
  
  console.log(`[Google Auth] Starting Google OAuth flow with redirect to: ${redirectTo}`);
  console.log(`[Google Auth] Host origin: ${origin}`);
  
  try {
    // Use signInWithOAuth which will handle both new and existing users
    const { data, error } = await supabase.auth.signInWithOAuth({
      provider: 'google',
      options: {
        redirectTo: redirectTo,
        queryParams: {
          access_type: 'offline',
          prompt: 'consent',
        },
        // Fix: Remove the scopes parameter completely and let Supabase use the defaults
        // This resolves the type mismatch issue
        skipBrowserRedirect: false,
      },
    });
    
    if (error) {
      console.error("[Google Auth] Error starting Google OAuth flow:", error);
      throw error;
    }
    
    console.log("[Google Auth] OAuth flow initiated successfully. User will be redirected to Google.");
  } catch (error) {
    console.error("[Google Auth] Exception during Google OAuth:", error);
    throw error;
  }
}

/**
 * Checks if an email exists in the auth.users table
 * Uses the database function check_email_exists for secure checking
 * @param email The email to check
 * @returns Promise resolving to boolean indicating if email exists
 */
export const checkEmailExists = async (email: string): Promise<boolean> => {
  try {
    // Fix: Remove the generic type parameter
    const { data, error } = await supabase
      .rpc('check_email_exists', { 
        email_to_check: email 
      });
      
    if (error) {
      console.error("Error checking email in auth:", error);
      return false; // Safe fallback
    }
    
    return !!data;
  } catch (error) {
    console.error("Exception checking if email exists:", error);
    return false; // Safe fallback
  }
};
